#!/usr/bin/env python3

import subprocess
import sys
import warnings

# show loading screen before app imports are made
loading_screen = subprocess.Popen([sys.executable, "app/loading_screen.py"])
# suppress deprecation warnings generated by imported libraries (e.g. xarray, pandas)
warnings.simplefilter(action='ignore', category=FutureWarning)

# start the main application
try:
    from PyQt6.QtGui import QFont, QFontDatabase
    from PyQt6.QtWidgets import QApplication

    from app.main_window import MainWindow
    from handlers.logging_handler import logger, setup_file_logging, setup_init_logging


    if __name__ == '__main__':
        # init logging
        setup_file_logging()
        init_logger = setup_init_logging()

        logger.info("Starting Telcorain...")

        # create the Qt application object
        app = QApplication(sys.argv)  # currently, there are no CLI args

        # set up the font
        font_id = QFontDatabase.addApplicationFont("app/gui/fonts/LiberationSans-Regular.ttf")
        if font_id != -1:
            font_families = QFontDatabase.applicationFontFamilies(font_id)
            if font_families:
                custom_font = QFont(font_families[0])
                custom_font.setPointSize(9)
                app.setFont(custom_font)

        # main window (Qt) = central hub of the application
        # constructor of the main window contains rest of the starting mechanism -> see /gui/main_window.py
        main_win = MainWindow(init_logger)

        main_win.statusBar().showMessage("Application is ready.", msecs=20000)
        logger.info("Starting done. Application is ready.")

        # hide loading screen
        loading_screen.terminate()

        # run until exit
        sys.exit(app.exec())
except Exception as error:
    if "loading_screen" in locals():
        loading_screen.terminate()
    raise
